{"version":3,"sources":["components/Header/Header.js","components/Loader/Loader.js","components/ItemDetails/ItemDetails.js","components/SwapiServiceContext/SwapiServiceContext.js","components/hoc/withSwapiService.js","components/RandomPlanet/RandomPlanet.js","components/ItemsList/ItemsList.js","components/Row/Row.js","components/pages/Page.js","components/pages/PeoplePage.js","components/pages/PlanetsPage.js","components/pages/StarshipsPage.js","components/App/App.js","components/ErrorIndicator/ErrorIndicator.js","components/ErrorBoundry/ErrorBoundry.js","index.js","services/swapi-service.js"],"names":["Header","className","to","exact","Loader","Round","item","label","value","ItemDetails","state","loading","onLoading","setState","prevProps","this","props","id","getData","then","name","form","undefined","src","alt","React","Children","map","children","child","cloneElement","Component","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","withSwapiService","Wrapped","swapiService","RandomPlanet","updateId","randomId","Math","floor","random","interval","setInterval","clearTimeout","getPlanet","idx","key","ItemsList","itemsList","next","updateItems","result","onItemSelect","getMore","renderItems","onClick","renderContent","loadMore","type","viewLoadMore","Row","left","right","Page","getAllData","rounds","Items","Details","getPerson","getAllPeople","getAllPlanets","getStarship","getAllStarships","App","path","render","component","PeoplePage","PlanetsPage","StarshipsPage","ErrorIndicator","ErrorBoundry","hasError","_apiBase","getResource","url","a","fetch","res","ok","Error","status","json","_transformPerson","results","_transformStarship","_transformPlanet","data","person","match","height","eyeColor","eye_color","birthYear","birth_year","gender","planet","diameter","population","rotation","rotation_period","starship","model","cost","cost_in_credits","length","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5bd5dfd8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <div className=\"logo\">\r\n                <Link to=\"/swapi/\" exact=\"true\">StarWarsApi</Link>\r\n            </div>\r\n            <div className=\"links\">\r\n                <Link to=\"/swapi/people\">People</Link>\r\n                <Link to=\"/swapi/planets\">Planets</Link>\r\n                <Link to=\"/swapi/starships\">Starships</Link>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Loader.css';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"lds-css\">\r\n            <div className=\"lds-double-ring\">\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import React, { Component } from 'react';\r\nimport Loader from '../Loader/Loader';\r\nimport './ItemDetails.css';\r\n\r\nconst Round = ({ item, label, value }) => {\r\n    return <li className=\"list-group-item\">{label}: {item[value]}</li>;\r\n}\r\n\r\nexport {\r\n    Round\r\n}\r\n\r\nclass ItemDetails extends Component {\r\n\r\n    state = {\r\n        item: {},\r\n        loading: false\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { id ,getData } = this.props;\r\n        if( prevProps.id === id ) {\r\n            return false;\r\n        } else {\r\n            getData(id)\r\n                .then(this.setState({\r\n                    loading: true\r\n                }))\r\n                .then(item => this.setState({\r\n                    item,\r\n                    loading: false\r\n                }));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { item } = this.state;\r\n        const { id, name } = item;\r\n        const { form } = this.props;\r\n        if( this.state.loading  ) return <Loader />;\r\n        if( id === undefined ) return <span>Select the item</span>;\r\n        return (\r\n            <div className=\"card item-details\">\r\n                <img className=\"card-img-top\" src={`https://starwars-visualguide.com/assets/img/${form}/${id}.jpg`} alt={name} />\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{name}</h5>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        {\r\n                            React.Children.map(this.props.children, (child) => {\r\n                                return React.cloneElement(child, { item })\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onLoading = () => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default ItemDetails;","import React from 'react';\r\n\r\nconst { \r\n    Provider: SwapiServiceProvider,\r\n    Consumer: SwapiServiceConsumer \r\n} = React.createContext();\r\n\r\nexport {\r\n    SwapiServiceProvider,\r\n    SwapiServiceConsumer\r\n};","import React from 'react';\r\nimport { SwapiServiceConsumer } from './../SwapiServiceContext/SwapiServiceContext';\r\n\r\nconst withSwapiService = () => (Wrapped) => {\r\n    return (props) => {\r\n        return (\r\n            <SwapiServiceConsumer>\r\n                {\r\n                    (swapiService) => {\r\n                        return <Wrapped {...props} swapiService={swapiService} />\r\n                    }\r\n                }\r\n            </SwapiServiceConsumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withSwapiService;","import React, { Component } from 'react';\r\nimport ItemDetails, { Round } from './../ItemDetails/ItemDetails';\r\nimport withSwapiService from './../hoc/withSwapiService';\r\n\r\nclass RandomPlanet extends Component {\r\n\r\n    state = {\r\n        id: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateId();\r\n        this.interval = setInterval( this.updateId, 5000 );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.interval);\r\n    }\r\n\r\n    render() {\r\n        const { getPlanet } = this.props.swapiService;\r\n        const rounds = [\r\n            { label: \"Diameter\", value: \"diameter\" },\r\n            { label: \"Population\", value: \"population\" },\r\n            { label: \"Rotation period\", value: \"rotation\" }\r\n        ];\r\n\r\n        return(\r\n            <ItemDetails id={this.state.id} getData={getPlanet} form={\"planets\"} >\r\n                {\r\n                    rounds.map(({ label, value }, idx) => {\r\n                        return <Round key={idx} label={label} value={value} />\r\n                    })\r\n                }\r\n            </ItemDetails>\r\n        ); \r\n    }\r\n\r\n    updateId = () => {\r\n        const randomId = Math.floor(Math.random()*25)+3;\r\n        this.setState({\r\n            id: randomId\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default withSwapiService()(RandomPlanet);","import React, { Component } from 'react';\r\nimport Loader from './../Loader/Loader';\r\nimport withSwapiService from './../hoc/withSwapiService';\r\nimport './ItemsList.css';\r\n\r\nclass ItemsList extends Component {\r\n\r\n    state = {\r\n        itemsList: [],\r\n        loading: true,\r\n        next: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { getData } = this.props;\r\n        this.updateItems(getData);\r\n    }\r\n\r\n    render() {\r\n        const { itemsList, loading, next } = this.state;\r\n        const { onItemSelect, getMore } = this.props;\r\n        const renderItems = itemsList.map(({ id, name }, idx) => {\r\n            return (\r\n                <li \r\n                    key={idx} \r\n                    className=\"list-group-item\"\r\n                    onClick={() => onItemSelect(id)}>\r\n                    {name} ({id})\r\n                </li>\r\n            )\r\n        });\r\n        const renderContent = loading ? <Loader /> : renderItems;\r\n        const loadMore = (\r\n            <button \r\n                type=\"button\" \r\n                className=\"btn btn-primary\"\r\n                onClick={() => this.updateItems(getMore)}>Load more</button>\r\n        );\r\n        const viewLoadMore = next === null ? null : loadMore;\r\n        return (\r\n            <div className=\"card items-list\">\r\n                <ul className=\"list-group list-group-flush\">\r\n                    { renderContent }\r\n                </ul>\r\n                { viewLoadMore }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateItems = (getData) => {\r\n        const { itemsList, next } = this.state;\r\n        getData(next)\r\n            .then(({result, next}) => {\r\n                this.setState({\r\n                    itemsList: [...itemsList, ...result],\r\n                    loading: false,\r\n                    next: next\r\n                })\r\n            });\r\n    }\r\n\r\n}\r\n\r\nexport default withSwapiService()(ItemsList);","import React, { Component } from 'react';\r\n\r\nclass Row extends Component {\r\n\r\n    state = {\r\n        id: undefined\r\n    }\r\n\r\n    render() {\r\n        const { left, right } = this.props;\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-6 mb-3\">\r\n                    {\r\n                        React.cloneElement(left, { onItemSelect: this.onItemSelect })\r\n                    }\r\n                </div>\r\n                <div className=\"col-12 col-md-6 mb-3\">\r\n                    {\r\n                        React.cloneElement(right, { id: this.state.id })\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    onItemSelect = (id) => {\r\n        this.setState({\r\n            id\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport ItemsList from './../ItemsList/ItemsList';\r\nimport ItemDetails, { Round } from './../ItemDetails/ItemDetails';\r\nimport Row from './../Row/Row';\r\n\r\nconst Page = ({ getData, getAllData, getMore, rounds, form }) => {\r\n\r\n    const Items = <ItemsList getData={getAllData} getMore={getMore} />;\r\n    const Details = \r\n        <ItemDetails getData={getData} form={form} >\r\n            {\r\n                rounds.map(({ label, value }, idx) => {\r\n                    return <Round key={idx} label={label} value={value} />\r\n                })\r\n            }\r\n        </ItemDetails>;\r\n\r\n    return (\r\n        <Row left={Items} right={Details} />\r\n    )\r\n}\r\n\r\nexport default Page;","import React from 'react';\r\nimport Page from './Page';\r\nimport withSwapiService from './../hoc/withSwapiService';\r\n\r\nconst PeoplePage = ({ swapiService }) => {\r\n    const {\r\n        getPerson,\r\n        getAllPeople,\r\n        getMore\r\n    } = swapiService;\r\n\r\n    const rounds = [\r\n        { label: \"Birth year\", value: \"birthYear\" },\r\n        { label: \"Eye color\", value: \"eyeColor\" },\r\n        { label: \"Gender\", value: \"gender\" },\r\n        { label: \"Height\", value: \"height\" }\r\n    ];\r\n\r\n    return <Page getData={getPerson} getAllData={getAllPeople} getMore={getMore} rounds={rounds} form={\"characters\"}  />\r\n}\r\n\r\nexport default withSwapiService()(PeoplePage);","import React from 'react';\r\nimport Page from './Page';\r\nimport withSwapiService from './../hoc/withSwapiService';\r\n\r\nconst PlanetsPage = ({ swapiService }) => {\r\n    const {\r\n        getPlanet,\r\n        getAllPlanets,\r\n        getMore\r\n    } = swapiService;\r\n\r\n    const rounds = [\r\n        { label: \"Diameter\", value: \"diameter\" },\r\n        { label: \"Population\", value: \"population\" },\r\n        { label: \"Rotation period\", value: \"rotation\" }\r\n    ];\r\n\r\n    return <Page getData={getPlanet} getAllData={getAllPlanets} getMore={getMore} rounds={rounds} form={\"planets\"}  />\r\n}\r\n\r\nexport default withSwapiService()(PlanetsPage);","import React from 'react';\r\nimport Page from './Page';\r\nimport withSwapiService from './../hoc/withSwapiService';\r\n\r\nconst StarshipsPage = ({ swapiService }) => {\r\n    const {\r\n        getStarship,\r\n        getAllStarships,\r\n        getMore\r\n    } = swapiService;\r\n\r\n    const rounds = [\r\n        { label: \"Model\", value: \"model\" },\r\n        { label: \"Cost\", value: \"cost\" },\r\n        { label: \"Length\", value: \"length\" }\r\n    ];\r\n\r\n    return <Page getData={getStarship} getAllData={getAllStarships} getMore={getMore} rounds={rounds} form={\"starships\"}  />\r\n}\r\n\r\nexport default withSwapiService()(StarshipsPage);","import React from 'react';\r\nimport Header from './../Header/Header';\r\nimport RandomPlanet from './../RandomPlanet/RandomPlanet';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport {\r\n    PeoplePage,\r\n    PlanetsPage,\r\n    StarshipsPage\r\n} from './../pages';\r\n\r\nconst App = () => {\r\n    return(\r\n        <div className=\"container\">\r\n            <Header />\r\n            <Switch>\r\n                <Route path=\"/swapi\" render={\r\n                    () => {\r\n                        return (\r\n                            <div>\r\n                                <h1>Welcome to StarWars Api Service</h1>\r\n                                <RandomPlanet />  \r\n                            </div>      \r\n                        )\r\n                    }\r\n                } exact />\r\n                <Route path=\"/swapi/people\" component={PeoplePage} />\r\n                <Route path=\"/swapi/planets\" component={PlanetsPage} />\r\n                <Route path=\"/swapi/starships\" component={StarshipsPage} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\n\r\nconst ErrorIndicator = () => {\r\n    return (\r\n        <div>\r\n            Error!!!\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorIndicator;","import React, { Component } from 'react';\r\nimport ErrorIndicator from './../ErrorIndicator/ErrorIndicator';\r\n\r\nexport default class ErrorBoundry extends Component {\r\n\r\n    state = {\r\n        hasError: false\r\n    };\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if( this.state.hasError ) {\r\n            return <ErrorIndicator />\r\n        }\r\n        \r\n        return this.props.children;\r\n    }\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport SwapiService from './services/swapi-service';\n\nimport App from './components/App/App';\nimport { SwapiServiceProvider } from './components/SwapiServiceContext/SwapiServiceContext';\nimport ErrorBoundry from './components/ErrorBoundry/ErrorBoundry';\n\nconst swapiService = new SwapiService();\n\nReactDOM.render(<ErrorBoundry>\n                    <SwapiServiceProvider value={swapiService}>\n                        <Router>\n                            <App />\n                        </Router>\n                    </SwapiServiceProvider>\n                </ErrorBoundry>\n    , document.getElementById('root'));","export default class SwapiService {\r\n\r\n    _apiBase = 'https://swapi.co/api';\r\n\r\n    getResource = async (url) => {\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}` +\r\n            `, received ${res.status}`)\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    getPerson = async (id) => {\r\n        const result = await this.getResource(`/people/${id}`);\r\n        return this._transformPerson(result);\r\n    }\r\n\r\n    getAllPeople = async () => {\r\n        const result = await this.getResource('/people/');\r\n        return {\r\n            result: result.results.map(this._transformPerson),\r\n            next: result.next\r\n        };\r\n    }\r\n\r\n    getStarship = async (id) => {\r\n        const result = await this.getResource(`/starships/${id}`);\r\n        return this._transformStarship(result);\r\n    }\r\n\r\n    getAllStarships = async () => {\r\n        const result = await this.getResource('/starships/');\r\n        return {\r\n            result: result.results.map(this._transformStarship),\r\n            next: result.next\r\n        };\r\n    }\r\n\r\n    getPlanet = async (id) => {\r\n        const result = await this.getResource(`/planets/${id}`);\r\n        return this._transformPlanet(result);\r\n    }\r\n\r\n    getAllPlanets = async () => {\r\n        const result = await this.getResource('/planets/');\r\n        return {\r\n            result: result.results.map(this._transformPlanet),\r\n            next: result.next\r\n        };\r\n    }\r\n\r\n    getMore = async (next) => {\r\n        const data = await fetch(next);\r\n        const res = await data.json();\r\n        return {\r\n            result: await res.results.map(this._transformPlanet),\r\n            next: await res.next\r\n        };\r\n    }\r\n\r\n    _transformPerson = (person) => {\r\n        return {\r\n            id: person.url.match(/(\\d+)/)[1],\r\n            name: person.name,\r\n            height: person.height,\r\n            eyeColor: person.eye_color,\r\n            birthYear: person.birth_year,\r\n            gender: person.gender\r\n        }\r\n    }\r\n\r\n    _transformPlanet = (planet) => {\r\n        return {\r\n            id: planet.url.match(/(\\d+)/)[1],\r\n            name: planet.name,\r\n            diameter: planet.diameter,\r\n            population: planet.population,\r\n            rotation: planet.rotation_period\r\n        }\r\n    }\r\n\r\n    _transformStarship = (starship) => {\r\n        return {\r\n            id: starship.url.match(/(\\d+)/)[1],\r\n            name: starship.name,\r\n            model: starship.model,\r\n            cost: starship.cost_in_credits,\r\n            length: starship.length\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":""}